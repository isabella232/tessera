name: Tessera Gradle Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  GRADLE_CACHE_KEY: ${{ github.run_id }}-gradle-${{ github.run_number }}-${{ github.run_number }}-${{ github.sha }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build -x test -x dependencyCheckAnalyze
    - uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ env.GRADLE_CACHE_KEY }}
        restore-keys: |
          ${{ env.GRADLE_CACHE_KEY }}
    - uses: actions/upload-artifact@v1
      if: success()
      with:
        name: tessera-jars
        path: /home/runner/work/tessera/tessera/tessera-dist/tessera-app/build/libs/

  checkdependencies:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ env.GRADLE_CACHE_KEY }}
        restore-keys: |
          ${{ env.GRADLE_CACHE_KEY }}
    - uses: actions/setup-java@v1
      with:
        java-version: 11
    - run: ./gradlew dependencyCheckAnalyze -x test

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ env.GRADLE_CACHE_KEY }}
        restore-keys: |
          ${{ env.GRADLE_CACHE_KEY }}
    - uses: actions/setup-java@v1
      with:
        java-version: 11
    - run: ./gradlew test -x dependencyCheckAnalyze  -x :tests:acceptance-test:test --info

#  orion-migration-test:
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:11
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_DB: orion
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          - 5432/tcp
#    needs: [build]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/cache@v1
#        with:
#          path: ~/.gradle/caches
#          key: ${{ env.GRADLE_CACHE_KEY }}
#          restore-keys: |
#            ${{ env.GRADLE_CACHE_KEY }}
#      - uses: actions/setup-java@v1
#        with:
#          java-version: 11
#      - run: ./gradlew :migration:orion-to-tessera:test -P downloadOrionMigrationSamples -P runPostgresTests --info
#        env:
#          POSTGRES_HOST: localhost
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_DB: orion
#          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
#      - uses: actions/upload-artifact@v1
#        if: always()
#        with:
#            name: orion_migration_test-report
#            path: /home/runner/work/tessera/tessera/migration/orion-to-tessera/build/reports/tests/

  itest:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ env.GRADLE_CACHE_KEY }}
        restore-keys: |
          ${{ env.GRADLE_CACHE_KEY }}
    - uses: actions/setup-java@v1
      with:
        java-version: 11
    - run: ./gradlew :tests:acceptance-test:test -PexcludeTests="RecoverIT,RestSuiteHttpH2RemoteEnclave,RestSuiteHttpH2RemoteEnclaveEncTypeEC,RunHashicorpIT,RunAzureIT,RunAwsIT"
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
       name: itest-junit-report
       path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/reports/tests/

  remote_enclave_itest:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ env.GRADLE_CACHE_KEY }}
          restore-keys: |
            ${{ env.GRADLE_CACHE_KEY }}
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - run: ./gradlew :tests:acceptance-test:test --tests RestSuiteHttpH2RemoteEnclave
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: remote_enclave_itest-junit-report
          path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/reports/tests/

  recovery_itest:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ env.GRADLE_CACHE_KEY }}
        restore-keys: |
          ${{ env.GRADLE_CACHE_KEY }}
    - uses: actions/setup-java@v1
      with:
        java-version: 11
    - run: ./gradlew :tests:acceptance-test:test --tests RecoverIT
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
          name: recovery_itest-junit-report
          path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/reports/tests/

  atest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ env.GRADLE_CACHE_KEY }}
          restore-keys: |
            ${{ env.GRADLE_CACHE_KEY }}
      - run: |
          ./gradlew build -x test -x dependencyCheckAnalyze -x javadoc
      - uses: docker/build-push-action@v1
        with:
          repository: quorumengineering/tessera
          tags: develop
          push: false
          dockerfile: .github/workflows/noBuild.Dockerfile
          build_args: JAR_FILE=tessera-dist/tessera-app/build/libs/tessera-app-*-app.jar
      - name: Get version of Quorum to use
        id: quorumver
        run: |
          tagversion=`cat version.txt | cut -d'-' -f1`
          echo "$tagversion" > version.txt
          VERSION=${tagversion%.*}
          RESP_CODE=$(docker manifest inspect quorumengineering/quorum:$VERSION> /dev/null ; echo $?)
          if [ ! $RESP_CODE -eq 0 ]; then
            echo "no quorum image found for $VERSION"
            VERSION=latest
          fi
          echo "using version $VERSION"
          echo ::set-output name=version::$VERSION
      - run:
          docker run --rm --network host -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/acctests:/tmp/acctests -e TF_VAR_quorum_docker_image='{name="quorumengineering/quorum:${{ steps.quorumver.outputs.version }}",local=false}' quorumengineering/acctests:latest test -Pauto -Dtags="!async && (basic || basic-istanbul || networks/typical::istanbul)" -Dauto.outputDir=/tmp/acctests -Dnetwork.forceDestroy=true

  vaultTests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ env.GRADLE_CACHE_KEY }}
          restore-keys: |
            ${{ env.GRADLE_CACHE_KEY }}
      - run: |
          wget https://releases.hashicorp.com/vault/1.2.2/vault_1.2.2_linux_amd64.zip -O /tmp/vault_1.2.2_linux_amd64.zip
          mkdir -p vault/bin && pushd $_
          unzip /tmp/vault_1.2.2_linux_amd64.zip
          export PATH=$PATH:$PWD && popd
          ./gradlew :tests:acceptance-test:test --tests RunHashicorpIT --tests RunAzureIT --tests RunAwsIT
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: vault-itests-junit-report
          path: /home/runner/work/tessera/tessera/tests/acceptance-test/build/reports/tests/
